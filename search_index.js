var searchModuleIndex = [
"README",
"common",
"directed",
"undirected",
"util",
];

var searchIndex = [
"Node",
"Edge",
"Graph",
"Graph[T]",
"copy",
"num_edges",
"num_nodes",
"DirectedGraph[T]",
"to_adjacency",
"to_adjacency_weights",
"to_undirected",
"DirectedGraph",
"DirectedGraph.create",
"UndirectedGraph[T]",
"+",
"bfs",
"complement",
"copy",
"degeneracy",
"degree_list",
"density",
"dfs",
"diameter",
"eccentricity",
"girth",
"has_eulerian_path",
"is_acyclic",
"is_bipartite",
"is_complete",
"is_connected",
"is_cycle",
"is_eulerian",
"is_regular",
"is_tree",
"line_graph",
"max_degree",
"min_degree",
"num_connected_components",
"num_spanning_trees",
"num_triangles",
"radius",
"to_adjacency_matrix",
"to_graph6",
"cycle_graph",
"path_graph",
"complete_graph",
"complete_bipartite_graph",
"star_graph",
"wheel_graph",
"UndirectedGraph.from_adjacency",
"UndirectedGraph.from_adjacency_matrix",
"UndirectedGraph.from_graph6",
"UndirectedGraph",
"UndirectedGraph.create",
"lu_decomposition",
"det",
"matmul",
];

var searchModuleData = [
["A graph package for the v programming language.","index.html"],
["","common.html"],
["","directed.html"],
["","undirected.html"],
["","util.html"],
];

var searchData = [
["common","A node that contains a value of type `T` in the mutable field `val`. Nodes are s","common.html#Node","struct "],
["common","An edge contains two references to nodes of type `T`.","common.html#Edge","struct "],
["common","A graph is a list of references to nodes and a list of references to edges made ","common.html#Graph","struct "],
["common","","common.html#Graph[T]","type "],
["common","Creates a copy of the graph, changes made in a copy will not affect the original","common.html#Graph[T].copy","fn (Graph[T])"],
["common","Returns the number of edges of a graph, also accessible through `Graph.edges.len","common.html#Graph[T].num_edges","fn (Graph[T])"],
["common","Returns the number of nodes of a graph, also accessible through `Graph.nodes.len","common.html#Graph[T].num_nodes","fn (Graph[T])"],
["directed","","directed.html#DirectedGraph[T]","type "],
["directed","Formats a directed graph into an adjacency mapping of the graph. The keys repres","directed.html#DirectedGraph[T].to_adjacency","fn (DirectedGraph[T])"],
["directed","Formats a directed graph into an adjacency mapping with weights of the graph. Th","directed.html#DirectedGraph[T].to_adjacency_weights","fn (DirectedGraph[T])"],
["directed","Creates an undirected graph from a directed graph by making all edges undirected","directed.html#DirectedGraph[T].to_undirected","fn (DirectedGraph[T])"],
["directed","A directed graph is a list of references to nodes and a list of references to (d","directed.html#DirectedGraph","struct "],
["directed","Factory function to create an DirectedGraph from a list of nodes and a list of d","directed.html#DirectedGraph.create","fn "],
["undirected","","undirected.html#UndirectedGraph[T]","type "],
["undirected","Disjoint union of two graphs. To achieve this the graph with least amount of edg","undirected.html#UndirectedGraph[T].+","fn (UndirectedGraph[T])"],
["undirected","Runs a breadth-first search (bfs) on the first node in nodes list of the graph. ","undirected.html#UndirectedGraph[T].bfs","fn (UndirectedGraph[T])"],
["undirected","Gives the complement of a graph. The list of (references to) nodes is reused, so","undirected.html#UndirectedGraph[T].complement","fn (UndirectedGraph[T])"],
["undirected","Creates a copy of the graph, changes made in a copy will not affect the original","undirected.html#UndirectedGraph[T].copy","fn (UndirectedGraph[T])"],
["undirected","Returns the degeneracy the graph. It implements the algorithm described by Matul","undirected.html#UndirectedGraph[T].degeneracy","fn (UndirectedGraph[T])"],
["undirected","Returns a list of the degrees of the graph, not necessarily ordered.","undirected.html#UndirectedGraph[T].degree_list","fn (UndirectedGraph[T])"],
["undirected","Returns the density of the graph.","undirected.html#UndirectedGraph[T].density","fn (UndirectedGraph[T])"],
["undirected","Runs a depth-first search (dfs) on the first node in nodes list of the graph. It","undirected.html#UndirectedGraph[T].dfs","fn (UndirectedGraph[T])"],
["undirected","Returns the diameter of the graph, this implementation only works for connected ","undirected.html#UndirectedGraph[T].diameter","fn (UndirectedGraph[T])"],
["undirected","Returns the eccentricity of a given node.","undirected.html#UndirectedGraph[T].eccentricity","fn (UndirectedGraph[T])"],
["undirected","Returns the girth of the graph.","undirected.html#UndirectedGraph[T].girth","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph contains an Eulerian path.","undirected.html#UndirectedGraph[T].has_eulerian_path","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is acyclic, i.e. does not contain a cycle. This differs","undirected.html#UndirectedGraph[T].is_acyclic","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is bipartite.","undirected.html#UndirectedGraph[T].is_bipartite","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is a complete graph.","undirected.html#UndirectedGraph[T].is_complete","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is connected.","undirected.html#UndirectedGraph[T].is_connected","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is a cycle.","undirected.html#UndirectedGraph[T].is_cycle","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is Eulerian.","undirected.html#UndirectedGraph[T].is_eulerian","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is regular.","undirected.html#UndirectedGraph[T].is_regular","fn (UndirectedGraph[T])"],
["undirected","Checks whether the graph is a tree.","undirected.html#UndirectedGraph[T].is_tree","fn (UndirectedGraph[T])"],
["undirected","Gives the line graph of a graph. The values of the nodes are the weights of the ","undirected.html#UndirectedGraph[T].line_graph","fn (UndirectedGraph[T])"],
["undirected","Returns the maximum degree of the graph.","undirected.html#UndirectedGraph[T].max_degree","fn (UndirectedGraph[T])"],
["undirected","Returns the minimum degree of the graph.","undirected.html#UndirectedGraph[T].min_degree","fn (UndirectedGraph[T])"],
["undirected","Returns the number of connected components of the graph.","undirected.html#UndirectedGraph[T].num_connected_components","fn (UndirectedGraph[T])"],
["undirected","Returns the number of spanning trees of the graph.","undirected.html#UndirectedGraph[T].num_spanning_trees","fn (UndirectedGraph[T])"],
["undirected","Returns the number of triangles of the graph.","undirected.html#UndirectedGraph[T].num_triangles","fn (UndirectedGraph[T])"],
["undirected","Returns the radius of the graph, this implementation only works for connected gr","undirected.html#UndirectedGraph[T].radius","fn (UndirectedGraph[T])"],
["undirected","Gives the (symmetric) adjacency matrix of the graph. The order of the rows and c","undirected.html#UndirectedGraph[T].to_adjacency_matrix","fn (UndirectedGraph[T])"],
["undirected","Returns the graph6 format of the given graph.","undirected.html#UndirectedGraph[T].to_graph6","fn (UndirectedGraph[T])"],
["undirected","Generates a cycle graph on n nodes. The graph's nodes are integer values from 0 ","undirected.html#cycle_graph","fn "],
["undirected","Generates a path graph on n nodes. The nodes of the graph are integers, from 0 t","undirected.html#path_graph","fn "],
["undirected","Generates a complete graph on n nodes. The nodes of the graph are integers, from","undirected.html#complete_graph","fn "],
["undirected","Generates a complete bipartite graph on n x m nodes, with respectively n and m n","undirected.html#complete_bipartite_graph","fn "],
["undirected","Generates a star graph on n nodes. In this case a star graph on n nodes has n-1 ","undirected.html#star_graph","fn "],
["undirected","Generates a wheel graph on n nodes. In this case a wheel graph on n nodes has n-","undirected.html#wheel_graph","fn "],
["undirected","Generates a graph from a mapping with the following signature: `map[T][]T`, with","undirected.html#UndirectedGraph.from_adjacency","fn "],
["undirected","Generate a graph from an integer matrix, returns a graph with integer values for","undirected.html#UndirectedGraph.from_adjacency_matrix","fn "],
["undirected","Generates a graph from a graph6 string, any invalid string will panic. For more ","undirected.html#UndirectedGraph.from_graph6","fn "],
["undirected","A graph is a list of references to nodes and a list of references to edges made ","undirected.html#UndirectedGraph","struct "],
["undirected","Factory function to create an UndirectedGraph from a list of nodes and a list of","undirected.html#UndirectedGraph.create","fn "],
["util","","util.html#lu_decomposition","fn "],
["util","","util.html#det","fn "],
["util","","util.html#matmul","fn "],
];

