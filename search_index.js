var searchModuleIndex = [
"README",
"undirected",
];

var searchIndex = [
"Graph[T]",
"bfs",
"clone",
"complement",
"degeneracy",
"degree_list",
"density",
"dfs",
"diameter",
"eccentricity",
"get_edge",
"girth",
"has_eulerian_path",
"is_acyclic",
"is_bipartite",
"is_complete",
"is_connected",
"is_cycle",
"is_eulerian",
"is_regular",
"is_tree",
"line_graph",
"max_degree",
"min_degree",
"mst",
"num_connected_components",
"num_edges",
"num_nodes",
"num_spanning_trees",
"num_triangles",
"radius",
"to_adjacency_matrix",
"to_graph6",
"total_weight",
"MSTAlgorithm",
"cycle_graph",
"path_graph",
"complete_graph",
"complete_bipartite_graph",
"star_graph",
"wheel_graph",
"Graph.from_adjacency",
"Graph.from_adjacency_matrix",
"Graph.from_graph6",
"Node",
"Edge",
"Graph",
"Graph.create",
"random_graph6",
"lu_decomposition",
"det",
"matmul",
];

var searchModuleData = [
["A graph package for the v programming language.","index.html"],
["","undirected.html"],
];

var searchData = [
["undirected","","undirected.html#Graph[T]","type "],
["undirected","Runs a breadth-first search (bfs) on a given node of the graph. It returns a spa","undirected.html#Graph[T].bfs","fn (Graph[T])"],
["undirected","Creates a clone of the graph, changes made in a clone will not affect the origin","undirected.html#Graph[T].clone","fn (Graph[T])"],
["undirected","Gives the complement of a graph. The list of (references to) nodes is reused, so","undirected.html#Graph[T].complement","fn (Graph[T])"],
["undirected","Returns the degeneracy the graph. It implements the algorithm described by Matul","undirected.html#Graph[T].degeneracy","fn (Graph[T])"],
["undirected","Returns a list of the degrees of the graph, not necessarily ordered.","undirected.html#Graph[T].degree_list","fn (Graph[T])"],
["undirected","Returns the density of the graph.","undirected.html#Graph[T].density","fn (Graph[T])"],
["undirected","Runs a depth-first search (dfs) on a given node of the graph. It returns a spann","undirected.html#Graph[T].dfs","fn (Graph[T])"],
["undirected","Returns the diameter of the graph, this implementation only works for connected ","undirected.html#Graph[T].diameter","fn (Graph[T])"],
["undirected","Returns the eccentricity of a given node.","undirected.html#Graph[T].eccentricity","fn (Graph[T])"],
["undirected","","undirected.html#Graph[T].get_edge","fn (Graph[T])"],
["undirected","Returns the girth of the graph.","undirected.html#Graph[T].girth","fn (Graph[T])"],
["undirected","Checks whether the graph contains an Eulerian path.","undirected.html#Graph[T].has_eulerian_path","fn (Graph[T])"],
["undirected","Checks whether the graph is acyclic, i.e. does not contain a cycle. This differs","undirected.html#Graph[T].is_acyclic","fn (Graph[T])"],
["undirected","Checks whether the graph is bipartite.","undirected.html#Graph[T].is_bipartite","fn (Graph[T])"],
["undirected","Checks whether the graph is a complete graph.","undirected.html#Graph[T].is_complete","fn (Graph[T])"],
["undirected","Checks whether the graph is connected.","undirected.html#Graph[T].is_connected","fn (Graph[T])"],
["undirected","Checks whether the graph is a cycle.","undirected.html#Graph[T].is_cycle","fn (Graph[T])"],
["undirected","Checks whether the graph is Eulerian.","undirected.html#Graph[T].is_eulerian","fn (Graph[T])"],
["undirected","Checks whether the graph is regular.","undirected.html#Graph[T].is_regular","fn (Graph[T])"],
["undirected","Checks whether the graph is a tree.","undirected.html#Graph[T].is_tree","fn (Graph[T])"],
["undirected","Gives the line graph of a graph. The values of the nodes are the weights of the ","undirected.html#Graph[T].line_graph","fn (Graph[T])"],
["undirected","Returns the maximum degree of the graph.","undirected.html#Graph[T].max_degree","fn (Graph[T])"],
["undirected","Returns the minimum degree of the graph.","undirected.html#Graph[T].min_degree","fn (Graph[T])"],
["undirected","Finds the minimum spanning tree of a graph. The possible algorithms are listed i","undirected.html#Graph[T].mst","fn (Graph[T])"],
["undirected","Returns the number of connected components of the graph.","undirected.html#Graph[T].num_connected_components","fn (Graph[T])"],
["undirected","Returns the number of edges of a graph, also accessible through `Graph.edges.len","undirected.html#Graph[T].num_edges","fn (Graph[T])"],
["undirected","Returns the number of nodes of a graph, also accessible through `Graph.nodes.len","undirected.html#Graph[T].num_nodes","fn (Graph[T])"],
["undirected","Returns the number of spanning trees of the graph.","undirected.html#Graph[T].num_spanning_trees","fn (Graph[T])"],
["undirected","Returns the number of triangles of the graph.","undirected.html#Graph[T].num_triangles","fn (Graph[T])"],
["undirected","Returns the radius of the graph, this implementation only works for connected gr","undirected.html#Graph[T].radius","fn (Graph[T])"],
["undirected","Gives the (symmetric) adjacency matrix of the graph. The order of the rows and c","undirected.html#Graph[T].to_adjacency_matrix","fn (Graph[T])"],
["undirected","Returns the graph6 format of the given graph.","undirected.html#Graph[T].to_graph6","fn (Graph[T])"],
["undirected","Returns the total weight of all edges of a graph.","undirected.html#Graph[T].total_weight","fn (Graph[T])"],
["undirected","","undirected.html#MSTAlgorithm","enum "],
["undirected","Generates a cycle graph on n nodes. The graph's nodes are integer values from 0 ","undirected.html#cycle_graph","fn "],
["undirected","Generates a path graph on n nodes. The nodes of the graph are integers, from 0 t","undirected.html#path_graph","fn "],
["undirected","Generates a complete graph on n nodes. The nodes of the graph are integers, from","undirected.html#complete_graph","fn "],
["undirected","Generates a complete bipartite graph on n x m nodes, with respectively n and m n","undirected.html#complete_bipartite_graph","fn "],
["undirected","Generates a star graph on n nodes. In this case a star graph on n nodes has n-1 ","undirected.html#star_graph","fn "],
["undirected","Generates a wheel graph on n nodes. In this case a wheel graph on n nodes has n-","undirected.html#wheel_graph","fn "],
["undirected","Generates a graph from a mapping with the following signature: `map[T][]T`, with","undirected.html#Graph.from_adjacency","fn "],
["undirected","Generate a graph from an integer matrix, returns a graph with integer values for","undirected.html#Graph.from_adjacency_matrix","fn "],
["undirected","Generates a graph from a graph6 string, any invalid string will panic. For more ","undirected.html#Graph.from_graph6","fn "],
["undirected","A node that contains a value of type `T` in the mutable field`val`. Nodes are st","undirected.html#Node","struct "],
["undirected","An edge contains two references to nodes of type `T` and an integer weight.","undirected.html#Edge","struct "],
["undirected","A graph is a list of references to nodes and a list of references to edges made ","undirected.html#Graph","struct "],
["undirected","Factory function to create an Graph from a list of nodes and a list of edges con","undirected.html#Graph.create","fn "],
["undirected","Returns a random graph6 string for a graph on `n` nodes, with a given edge proba","undirected.html#random_graph6","fn "],
["undirected","","undirected.html#lu_decomposition","fn "],
["undirected","","undirected.html#det","fn "],
["undirected","","undirected.html#matmul","fn "],
];

